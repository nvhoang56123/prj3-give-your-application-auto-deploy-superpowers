version: 2.1

orbs:
  slack: circleci/slack@4.1
  aws-cli: circleci/aws-cli@3.1.5
  python: circleci/python@2.1.1

commands:
  exports:
    steps:
      - run:
          name: "Set some pre-define parameters"
          command: |            
            echo 'export CURRENT_COMMIT=`git rev-parse --short HEAD`' >> "$BASH_ENV"
            echo 'export PRJ_NAME="prj3-hnguyen3"' >> "$BASH_ENV"
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given an ID.
    parameters:
      id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:      
      - exports
      - run:
          name: Destroy Cloud Formation Frontend Stacks and bucket
          when: on_fail
          command: |
            echo "Deleting Cloud Formation Frontend Stack" 
            aws s3 rm s3://${PRJ_NAME}-bucket-<< parameters.id >> --recursive           
            aws cloudformation delete-stack --stack-name ${PRJ_NAME}-frontend-<< parameters.id >> --output text
      - run:
          name: Destroy Cloud Formation Backend Stacks and infrastructure
          when: on_fail
          command: |
            echo "Deleting Cloud Formation Backend Stack"
            aws cloudformation delete-stack --stack-name ${PRJ_NAME}-backend-<< parameters.id >> --output text
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow or failed in migration step.
    parameters:
      id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          working_directory: ./backend
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/4NN3FNBordvxbbffqwaTSF/migration_<< parameters.id >>)
            echo $SUCCESS
            if [[ "$SUCCESS" == "1" ]]
            then
              pwd
              ls -la
              npm install
              npm run migration:revert
            fi
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_ACCESS_SECRET
          aws-region: AWS_REGION_NAME
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-cache]
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: | 
            npm install
            npm run build
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - "frontend/node_modules"
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-cache
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-cache]
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |            
            npm install
            npm run build
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - "backend/node_modules"
      - save_cache:
          paths: [backend/node_modules]
          key: backend-cache
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-cache]
      - run:
          name: Frontend Test
          working_directory: ./frontend
          command: |
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-cache]
      - run:
          name: Back-end Test
          working_directory: ./backend
          command: |
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-cache]
      - run:
          name: Frontend Scan
          working_directory: ./frontend
          command: |
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force            
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-cache]
      - run:
          name: Back-end Scan
          working_directory: ./backend
          command: |            
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force            
            npm audit fix --force
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - exports
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws sts get-caller-identity
            aws cloudformation deploy --template-file .circleci/files/backend.yml \
              --tags project="${PRJ_NAME}" \
              --stack-name "${PRJ_NAME}-backend-${CURRENT_COMMIT}" \
              --parameter-overrides COMMITID="${CURRENT_COMMIT}" ID="${PRJ_NAME}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws sts get-caller-identity
            aws cloudformation deploy --template-file .circleci/files/frontend.yml \
              --tags project="${PRJ_NAME}" \
              --stack-name "${PRJ_NAME}-frontend-${CURRENT_COMMIT}" \
              --parameter-overrides COMMITID="${CURRENT_COMMIT}" ID="${PRJ_NAME}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo $(aws ec2 describe-instances)
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
               --filters "Name=tag:Name,Values=${PRJ_NAME}-backend-${CURRENT_COMMIT}" \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            curl --insecure https://kvdb.io/4NN3FNBordvxbbffqwaTSF/backendurl -d $(echo $BACKEND_PUBLIC_IP)
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          id: ${CURRENT_COMMIT}

  configure-infrastructure:
    docker:
        - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["dd:08:9e:3b:ba:06:c8:14:98:47:4d:f1:78:25:6f:af"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure variable
          command: |
            echo ENVIRONMENT=production > backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            cat backend/.env
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            cat inventory.txt
            ansible-playbook -i inventory.txt -vvvvv configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - destroy-environment:
          id: ${CURRENT_COMMIT}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - exports
      - install_awscli    
      - restore_cache:
          keys: [backend-cache]
      - run:
          name: Run migrations
          command: |
            cd backend
            echo "Running migrations"
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to Kvdb
          command: |
            if grep -q "success" ~/project/backend/migrations_dump.txt
            then
              # If you are using kvdb.io, generate the bucket ID "4NN3FNBordvxbbffqwaTSF" in your local terminal first
              curl --insecure https://kvdb.io/4NN3FNBordvxbbffqwaTSF/migration_${CURRENT_COMMIT}  -d '1'
            fi
      - destroy-environment:
          id: ${CURRENT_COMMIT}

  deploy-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - exports
      - install_awscli     
      - run:
          name: Install frontend dependencies
          working_directory: ./frontend
          command: |              
              npm install
      - restore_cache:
          keys: [frontend-cache]
      - run:
          name: Get backend URL
          working_directory: ./frontend
          command: |   
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
               --filters "Name=tag:Name,Values=${PRJ_NAME}-backend-${CURRENT_COMMIT}" \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --output text)
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> .env
            echo "NODE_ENV=production" >> .env
            cat .env
      - run:
          name: Deploy frontend artifact
          working_directory: ./frontend
          command: |
            npm install
            npm run build
            cp .env dist
            tar -czvf artifact-"${CURRENT_COMMIT}".tar.gz dist
            aws s3 cp dist s3://${PRJ_NAME}-bucket-${CURRENT_COMMIT} --recursive --acl bucket-owner-full-control
  deploy-backend:
    docker:
      - image: cimg/node:13.8.0
        environment:
          NODE_ENV: "local"
          VERSION: "1"
          ENVIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      - checkout
      - exports
      - install_awscli  
      - add_ssh_keys:
          fingerprints: ["dd:08:9e:3b:ba:06:c8:14:98:47:4d:f1:78:25:6f:af"]          
      - attach_workspace:
          at: ./
      - restore_cache:
          keys: [backend-cache]
      - run:
          name: Deploy backend
          working_directory: ./
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
               --filters "Name=tag:Name,Values=${PRJ_NAME}-backend-${CURRENT_COMMIT}" \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            cd backend
            npm install
            npm run build
            cd ..
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml -vvv          
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - exports
      - install_awscli
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_URL=$(curl --insecure https://kvdb.io/4NN3FNBordvxbbffqwaTSF/backendurl)
            echo $BACKEND_URL
            curl "$BACKEND_URL:3030/api/status"
            if curl "$BACKEND_URL:3030/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi          
      - run:
          name: Frontend smoke test.
          command: |
            URL="${PRJ_NAME}-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            echo $URL
            if curl -s http://${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          id: ${CURRENT_COMMIT}
      - revert-migrations:
          id: ${CURRENT_COMMIT}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - exports
      - install_awscli    
      - run:
          name: Update Cloud Front distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=${PRJ_NAME} \
              --stack-name "${PRJ_NAME}-CloudFront" \
              --parameter-overrides WorkflowID="${CURRENT_COMMIT}"
      - revert-migrations:
          id: ${CURRENT_COMMIT}
      - destroy-environment:
          id: ${CURRENT_COMMIT}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - exports
      - install_awscli          
      - run:
          name: Remove old stacks and files
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(curl --insecure https://kvdb.io/FWfT3EJvSc3D57Yhp76CdN/OldWorkflowID)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CURRENT_COMMIT}"
            CurrentWorkflowID=${CCURRENT_COMMIT}
            echo CurrentWorkflowID: "${CurrentWorkflowID}"

            if [[ ( "$CurrentWorkflowID" != "$OldWorkflowID" ) && ( ! -z "$OldWorkflowID" ) ]]
            then
              BUCKET_EXISTS=$(aws s3api head-bucket --bucket ${PRJ_NAME}-bucket-${OldWorkflowID} 2>&1 || true)
              if [ -z "$BUCKET_EXISTS" ]; then
                echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
                aws s3 rm s3://${PRJ_NAME}-bucket-${OldWorkflowID} --recursive    
                aws cloudformation delete-stack --stack-name ${PRJ_NAME}-frontend-${OldWorkflowID} 
                aws cloudformation delete-stack --stack-name ${PRJ_NAME}-backend-${OldWorkflowID} 
              else
                echo "Bucket ${PRJ_NAME}-${OldWorkflowID} does not exist. Skipping bucket empty action."
              fi              
            else
              echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done..."
            fi
      - run:
          name: Get old workflow to update
          command: |
            export CurrentWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo $OldWorkflowID
            if [ ! -z "$CurrentWorkflowID" ]
              then
                curl --insecure https://kvdb.io/4NN3FNBordvxbbffqwaTSF/OldWorkflowID -d ${CurrentWorkflowID}
            fi   

workflows:
  default:
    jobs:
      - build-frontend        
      - build-backend        
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
          filters:
            branches:
              only: [main]