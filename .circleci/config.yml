version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.5
  python: circleci/python@2.1.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            # exit 1
  exports:
    steps:
      - run:
          name: "Get Current and Previous commit"
          command: |
            # Git hash for the current commit
            echo 'export CURRENT_COMMIT=`git show HEAD`' >> "$BASH_ENV"
            echo 'export PREVIOUS_COMMIT=`git show HEAD^1`' >> "$BASH_ENV"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      commit-key:
        type: string
        default: ""
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: "on_fail"
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      # Checkout code from git
      # Restore from cache
      # Your job code here   
      - run:
          name: Test-frontend
          command: |
            cd frontend
            echo "Temporary no test"    
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      # Checkout code from git
      # Your job code here    
      - run:
          name: test-backend
          command: |
            # Your code here
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      # Your job code here
      - run:
          name: scan-frontend
          command: |
            # Your code here
            cd frontend
            npm install
            npm audit fix --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      - checkout
      # Your job code here
      - run:
          name: scan-frontend
          command: |
            # Your code here
            cd frontend
            npm install
            npm audit fix --force
  deploy-infrastructure:
    executor: aws-cli/default
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_ACCESS_SECRET
          aws-region: AWS_REGION_NAME
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=prj3-hnguyen3 \
              --stack-name "prj3-hnguyen3-back-end" \
              --parameter-overrides ID="prj3-hnguyen3"                
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=yprj3-hnguyen3 \
              --stack-name "prj3-hnguyen3-front-end" \
              --parameter-overrides ID="prj3-hnguyen3"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    executor:
      name: python/default
      tag: "3.11.2"
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # Your code here
            exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            exit 1
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Checkout code from git
      - run:
          name: Run migrations
          working_directory: ~/backend
          command: |       
            npm install
            npm run migrations > migrations.out            
            cat migrations.out
      - run:
          name: Send migration results to git
          working_directory: ~/backend
          command: |
            grep -q "has been executed successfully." migrations.out; 
            [ $? -eq 0 ] 
            then
              git config credential.helper 'cache --timeout=120'
              git config user.email "hoangnv5@fpt.com"
              git config user.name "Deployment Bot"
              git commit --allow-empty -m "Trigger deployment"
              echo `git rev-parse --short HEAD` > current-hash.txt
              git push -q https://${GITHUB_TOKEN}@https://github.com/nvhoang56123/prj3-give-your-application-auto-deploy-superpowers main

            echo "No migration"
      - revert-migrations:
          commit-key: migration_$CUR_SHORT_HASH    

  deploy-frontend:
    executor: 
      name: python/default
      tag: "3.11.2"
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    executor: 
      name: python/default
      tag: "3.11.2"
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    executor: aws-cli/default
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # Your code here
            pwd
            ls
      - run:
          name: Update cloudfront distribution
          command: |
            # Your code here
            pwd
            ls
      # Here's where you will add some code to rollback on failure  
      - run:
          name: scan-frontend
          command: |
            # Your code here
            pwd
            ls
  cleanup:
    executor: aws-cli/default
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi          

workflows:
  default:
    jobs:
      - build-frontend:
          filters:
            branches:
              only: [master]
      - build-backend:
          filters:
            branches:
              only: [master]
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]