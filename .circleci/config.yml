version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters: null
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            # exit 1
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters: null
    steps:
      - run:
          name: Revert migrations
          command: >
            # Curl command here to see if there was a successful migration
            associated with the workflow id, store result in SUCCESS variable

            SUCCESS = 1

            if(( $SUCCESS==1 )); 

            then

            #  cd ~/project/backend

            #  npm install

            #  Add revert code here. You can find this in the Getting Started section.

            #  exit 1

            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Build front-end
          command: |
            # Your code here
            # exit 1
            pwd
            ls
      - save_cache:
          paths:
            - frontend/node_modules
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Back-end build
          command: |
            # Your code here
            exit 1
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps: null
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps: null
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps: null
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps: null
  deploy-infrastructure:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              #--tags project=your-tag \
              # --stack-name "your back-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              #--tags project=your-tag \
              # --stack-name "your front-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
  configure-infrastructure:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Install dependencies
          command: |
            # Your code here
            exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            exit 1
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
  smoke-test:
    docker: null
    steps:
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
  cloudfront-update:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
cleanup:
  docker:
    - image: circleci/node:13.8.0
  steps:
    - run:
        name: Get old stack workflow id
        command: |
          # your code here
          export OldWorkflowID="the id here"
          export STACKS=[] #put the list of stacks here
    - run:
        name: Remove old stacks and files
        command: |
          if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
          then
            # your code here
          fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          filters:
            branches: null
            only:
              - test-feature-branch
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
      - cloudfront-update:
          requires:
            - smoke-test
      - cleanup:
          requires:
            - cloudfront-update